/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_UEFI_GENERATED_TRACERS_H
#define TRACE_HW_UEFI_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_UEFI_REG_READ_EVENT;
extern TraceEvent _TRACE_UEFI_REG_WRITE_EVENT;
extern TraceEvent _TRACE_UEFI_HARD_RESET_EVENT;
extern TraceEvent _TRACE_UEFI_VARIABLE_EVENT;
extern TraceEvent _TRACE_UEFI_STATUS_EVENT;
extern TraceEvent _TRACE_UEFI_EVENT_EVENT;
extern TraceEvent _TRACE_UEFI_VARS_PROTO_CMD_EVENT;
extern TraceEvent _TRACE_UEFI_VARS_SECURITY_VIOLATION_EVENT;
extern TraceEvent _TRACE_UEFI_VARS_POLICY_CMD_EVENT;
extern TraceEvent _TRACE_UEFI_VARS_POLICY_DENY_EVENT;
extern uint16_t _TRACE_UEFI_REG_READ_DSTATE;
extern uint16_t _TRACE_UEFI_REG_WRITE_DSTATE;
extern uint16_t _TRACE_UEFI_HARD_RESET_DSTATE;
extern uint16_t _TRACE_UEFI_VARIABLE_DSTATE;
extern uint16_t _TRACE_UEFI_STATUS_DSTATE;
extern uint16_t _TRACE_UEFI_EVENT_DSTATE;
extern uint16_t _TRACE_UEFI_VARS_PROTO_CMD_DSTATE;
extern uint16_t _TRACE_UEFI_VARS_SECURITY_VIOLATION_DSTATE;
extern uint16_t _TRACE_UEFI_VARS_POLICY_CMD_DSTATE;
extern uint16_t _TRACE_UEFI_VARS_POLICY_DENY_DSTATE;
#define TRACE_UEFI_REG_READ_ENABLED 1
#define TRACE_UEFI_REG_WRITE_ENABLED 1
#define TRACE_UEFI_HARD_RESET_ENABLED 1
#define TRACE_UEFI_VARIABLE_ENABLED 1
#define TRACE_UEFI_STATUS_ENABLED 1
#define TRACE_UEFI_EVENT_ENABLED 1
#define TRACE_UEFI_VARS_PROTO_CMD_ENABLED 1
#define TRACE_UEFI_VARS_SECURITY_VIOLATION_ENABLED 1
#define TRACE_UEFI_VARS_POLICY_CMD_ENABLED 1
#define TRACE_UEFI_VARS_POLICY_DENY_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_UEFI_REG_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_REG_READ) || \
    false)

static inline void _nocheck__trace_uefi_reg_read(uint64_t addr, unsigned size)
{
    if (trace_event_get_state(TRACE_UEFI_REG_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 2 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_reg_read " "addr 0x%" PRIx64 ", size %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, size);
#line 58 "trace/trace-hw_uefi.h"
        } else {
#line 2 "../hw/uefi/trace-events"
            qemu_log("uefi_reg_read " "addr 0x%" PRIx64 ", size %u" "\n", addr, size);
#line 62 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_reg_read(uint64_t addr, unsigned size)
{
    if (true) {
        _nocheck__trace_uefi_reg_read(addr, size);
    }
}

#define TRACE_UEFI_REG_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_REG_WRITE) || \
    false)

static inline void _nocheck__trace_uefi_reg_write(uint64_t addr, uint64_t val, unsigned size)
{
    if (trace_event_get_state(TRACE_UEFI_REG_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 3 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_reg_write " "addr 0x%" PRIx64 ", val 0x%" PRIx64 ", size %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, val, size);
#line 89 "trace/trace-hw_uefi.h"
        } else {
#line 3 "../hw/uefi/trace-events"
            qemu_log("uefi_reg_write " "addr 0x%" PRIx64 ", val 0x%" PRIx64 ", size %d" "\n", addr, val, size);
#line 93 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_reg_write(uint64_t addr, uint64_t val, unsigned size)
{
    if (true) {
        _nocheck__trace_uefi_reg_write(addr, val, size);
    }
}

#define TRACE_UEFI_HARD_RESET_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_HARD_RESET) || \
    false)

static inline void _nocheck__trace_uefi_hard_reset(void)
{
    if (trace_event_get_state(TRACE_UEFI_HARD_RESET) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_hard_reset " "" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 120 "trace/trace-hw_uefi.h"
        } else {
#line 4 "../hw/uefi/trace-events"
            qemu_log("uefi_hard_reset " "" "\n");
#line 124 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_hard_reset(void)
{
    if (true) {
        _nocheck__trace_uefi_hard_reset();
    }
}

#define TRACE_UEFI_VARIABLE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_VARIABLE) || \
    false)

static inline void _nocheck__trace_uefi_variable(const char * context, const char * name, uint64_t size, const char * uuid)
{
    if (trace_event_get_state(TRACE_UEFI_VARIABLE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_variable " "context %s, name %s, size %" PRIu64 ", uuid %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , context, name, size, uuid);
#line 151 "trace/trace-hw_uefi.h"
        } else {
#line 7 "../hw/uefi/trace-events"
            qemu_log("uefi_variable " "context %s, name %s, size %" PRIu64 ", uuid %s" "\n", context, name, size, uuid);
#line 155 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_variable(const char * context, const char * name, uint64_t size, const char * uuid)
{
    if (true) {
        _nocheck__trace_uefi_variable(context, name, size, uuid);
    }
}

#define TRACE_UEFI_STATUS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_STATUS) || \
    false)

static inline void _nocheck__trace_uefi_status(const char * context, const char * name)
{
    if (trace_event_get_state(TRACE_UEFI_STATUS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_status " "context %s, status %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , context, name);
#line 182 "trace/trace-hw_uefi.h"
        } else {
#line 8 "../hw/uefi/trace-events"
            qemu_log("uefi_status " "context %s, status %s" "\n", context, name);
#line 186 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_status(const char * context, const char * name)
{
    if (true) {
        _nocheck__trace_uefi_status(context, name);
    }
}

#define TRACE_UEFI_EVENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_EVENT) || \
    false)

static inline void _nocheck__trace_uefi_event(const char * name)
{
    if (trace_event_get_state(TRACE_UEFI_EVENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_event " "event %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , name);
#line 213 "trace/trace-hw_uefi.h"
        } else {
#line 9 "../hw/uefi/trace-events"
            qemu_log("uefi_event " "event %s" "\n", name);
#line 217 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_event(const char * name)
{
    if (true) {
        _nocheck__trace_uefi_event(name);
    }
}

#define TRACE_UEFI_VARS_PROTO_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_VARS_PROTO_CMD) || \
    false)

static inline void _nocheck__trace_uefi_vars_proto_cmd(const char * cmd)
{
    if (trace_event_get_state(TRACE_UEFI_VARS_PROTO_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_vars_proto_cmd " "cmd %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 244 "trace/trace-hw_uefi.h"
        } else {
#line 12 "../hw/uefi/trace-events"
            qemu_log("uefi_vars_proto_cmd " "cmd %s" "\n", cmd);
#line 248 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_vars_proto_cmd(const char * cmd)
{
    if (true) {
        _nocheck__trace_uefi_vars_proto_cmd(cmd);
    }
}

#define TRACE_UEFI_VARS_SECURITY_VIOLATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_VARS_SECURITY_VIOLATION) || \
    false)

static inline void _nocheck__trace_uefi_vars_security_violation(const char * reason)
{
    if (trace_event_get_state(TRACE_UEFI_VARS_SECURITY_VIOLATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_vars_security_violation " "reason %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reason);
#line 275 "trace/trace-hw_uefi.h"
        } else {
#line 13 "../hw/uefi/trace-events"
            qemu_log("uefi_vars_security_violation " "reason %s" "\n", reason);
#line 279 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_vars_security_violation(const char * reason)
{
    if (true) {
        _nocheck__trace_uefi_vars_security_violation(reason);
    }
}

#define TRACE_UEFI_VARS_POLICY_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_VARS_POLICY_CMD) || \
    false)

static inline void _nocheck__trace_uefi_vars_policy_cmd(const char * cmd)
{
    if (trace_event_get_state(TRACE_UEFI_VARS_POLICY_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_vars_policy_cmd " "cmd %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cmd);
#line 306 "trace/trace-hw_uefi.h"
        } else {
#line 16 "../hw/uefi/trace-events"
            qemu_log("uefi_vars_policy_cmd " "cmd %s" "\n", cmd);
#line 310 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_vars_policy_cmd(const char * cmd)
{
    if (true) {
        _nocheck__trace_uefi_vars_policy_cmd(cmd);
    }
}

#define TRACE_UEFI_VARS_POLICY_DENY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_UEFI_VARS_POLICY_DENY) || \
    false)

static inline void _nocheck__trace_uefi_vars_policy_deny(const char * reason)
{
    if (trace_event_get_state(TRACE_UEFI_VARS_POLICY_DENY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/uefi/trace-events"
            qemu_log("%d@%zu.%06zu:uefi_vars_policy_deny " "reason %s" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reason);
#line 337 "trace/trace-hw_uefi.h"
        } else {
#line 17 "../hw/uefi/trace-events"
            qemu_log("uefi_vars_policy_deny " "reason %s" "\n", reason);
#line 341 "trace/trace-hw_uefi.h"
        }
    }
}

static inline void trace_uefi_vars_policy_deny(const char * reason)
{
    if (true) {
        _nocheck__trace_uefi_vars_policy_deny(reason);
    }
}
#endif /* TRACE_HW_UEFI_GENERATED_TRACERS_H */
