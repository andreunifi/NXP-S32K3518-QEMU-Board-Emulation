/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_RISCV_GENERATED_TRACERS_H
#define TRACE_HW_RISCV_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_RISCV_IOMMU_NEW_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_FLT_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_PRI_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_DMA_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_MSI_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_MRIF_NOTIFICATION_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_CMD_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_NOTIFIER_ADD_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_NOTIFIER_DEL_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_ICVEC_WRITE_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_ATS_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_ATS_INVAL_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_ATS_PRGR_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_SYS_IRQ_SENT_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_SYS_MSI_SENT_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_SYS_RESET_HOLD_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_PCI_RESET_HOLD_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_HPM_READ_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_HPM_INCR_CTR_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE_EVENT;
extern TraceEvent _TRACE_RISCV_IOMMU_HPM_EVT_WRITE_EVENT;
extern uint16_t _TRACE_RISCV_IOMMU_NEW_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_FLT_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_PRI_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_DMA_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_MSI_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_MRIF_NOTIFICATION_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_CMD_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_NOTIFIER_ADD_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_NOTIFIER_DEL_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_ICVEC_WRITE_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_ATS_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_ATS_INVAL_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_ATS_PRGR_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_SYS_IRQ_SENT_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_SYS_MSI_SENT_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_SYS_RESET_HOLD_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_PCI_RESET_HOLD_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_HPM_READ_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_HPM_INCR_CTR_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE_DSTATE;
extern uint16_t _TRACE_RISCV_IOMMU_HPM_EVT_WRITE_DSTATE;
#define TRACE_RISCV_IOMMU_NEW_ENABLED 1
#define TRACE_RISCV_IOMMU_FLT_ENABLED 1
#define TRACE_RISCV_IOMMU_PRI_ENABLED 1
#define TRACE_RISCV_IOMMU_DMA_ENABLED 1
#define TRACE_RISCV_IOMMU_MSI_ENABLED 1
#define TRACE_RISCV_IOMMU_MRIF_NOTIFICATION_ENABLED 1
#define TRACE_RISCV_IOMMU_CMD_ENABLED 1
#define TRACE_RISCV_IOMMU_NOTIFIER_ADD_ENABLED 1
#define TRACE_RISCV_IOMMU_NOTIFIER_DEL_ENABLED 1
#define TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR_ENABLED 1
#define TRACE_RISCV_IOMMU_ICVEC_WRITE_ENABLED 1
#define TRACE_RISCV_IOMMU_ATS_ENABLED 1
#define TRACE_RISCV_IOMMU_ATS_INVAL_ENABLED 1
#define TRACE_RISCV_IOMMU_ATS_PRGR_ENABLED 1
#define TRACE_RISCV_IOMMU_SYS_IRQ_SENT_ENABLED 1
#define TRACE_RISCV_IOMMU_SYS_MSI_SENT_ENABLED 1
#define TRACE_RISCV_IOMMU_SYS_RESET_HOLD_ENABLED 1
#define TRACE_RISCV_IOMMU_PCI_RESET_HOLD_ENABLED 1
#define TRACE_RISCV_IOMMU_HPM_READ_ENABLED 1
#define TRACE_RISCV_IOMMU_HPM_INCR_CTR_ENABLED 1
#define TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY_ENABLED 1
#define TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE_ENABLED 1
#define TRACE_RISCV_IOMMU_HPM_EVT_WRITE_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_RISCV_IOMMU_NEW_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_NEW) || \
    false)

static inline void _nocheck__trace_riscv_iommu_new(const char * id, unsigned b, unsigned d, unsigned f)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_NEW) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_new " "%s: device attached %04x:%02x.%d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f);
#line 97 "trace/trace-hw_riscv.h"
        } else {
#line 4 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_new " "%s: device attached %04x:%02x.%d" "\n", id, b, d, f);
#line 101 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_new(const char * id, unsigned b, unsigned d, unsigned f)
{
    if (true) {
        _nocheck__trace_riscv_iommu_new(id, b, d, f);
    }
}

#define TRACE_RISCV_IOMMU_FLT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_FLT) || \
    false)

static inline void _nocheck__trace_riscv_iommu_flt(const char * id, unsigned b, unsigned d, unsigned f, uint64_t reason, uint64_t iova)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_FLT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_flt " "%s: fault %04x:%02x.%u reason: 0x%"PRIx64" iova: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f, reason, iova);
#line 128 "trace/trace-hw_riscv.h"
        } else {
#line 5 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_flt " "%s: fault %04x:%02x.%u reason: 0x%"PRIx64" iova: 0x%"PRIx64 "\n", id, b, d, f, reason, iova);
#line 132 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_flt(const char * id, unsigned b, unsigned d, unsigned f, uint64_t reason, uint64_t iova)
{
    if (true) {
        _nocheck__trace_riscv_iommu_flt(id, b, d, f, reason, iova);
    }
}

#define TRACE_RISCV_IOMMU_PRI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_PRI) || \
    false)

static inline void _nocheck__trace_riscv_iommu_pri(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_PRI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_pri " "%s: page request %04x:%02x.%u iova: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f, iova);
#line 159 "trace/trace-hw_riscv.h"
        } else {
#line 6 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_pri " "%s: page request %04x:%02x.%u iova: 0x%"PRIx64 "\n", id, b, d, f, iova);
#line 163 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_pri(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova)
{
    if (true) {
        _nocheck__trace_riscv_iommu_pri(id, b, d, f, iova);
    }
}

#define TRACE_RISCV_IOMMU_DMA_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_DMA) || \
    false)

static inline void _nocheck__trace_riscv_iommu_dma(const char * id, unsigned b, unsigned d, unsigned f, unsigned pasid, const char * dir, uint64_t iova, uint64_t phys)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_DMA) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 7 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_dma " "%s: translate %04x:%02x.%u #%u %s 0x%"PRIx64" -> 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f, pasid, dir, iova, phys);
#line 190 "trace/trace-hw_riscv.h"
        } else {
#line 7 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_dma " "%s: translate %04x:%02x.%u #%u %s 0x%"PRIx64" -> 0x%"PRIx64 "\n", id, b, d, f, pasid, dir, iova, phys);
#line 194 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_dma(const char * id, unsigned b, unsigned d, unsigned f, unsigned pasid, const char * dir, uint64_t iova, uint64_t phys)
{
    if (true) {
        _nocheck__trace_riscv_iommu_dma(id, b, d, f, pasid, dir, iova, phys);
    }
}

#define TRACE_RISCV_IOMMU_MSI_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_MSI) || \
    false)

static inline void _nocheck__trace_riscv_iommu_msi(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova, uint64_t phys)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_MSI) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_msi " "%s: translate %04x:%02x.%u MSI 0x%"PRIx64" -> 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f, iova, phys);
#line 221 "trace/trace-hw_riscv.h"
        } else {
#line 8 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_msi " "%s: translate %04x:%02x.%u MSI 0x%"PRIx64" -> 0x%"PRIx64 "\n", id, b, d, f, iova, phys);
#line 225 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_msi(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova, uint64_t phys)
{
    if (true) {
        _nocheck__trace_riscv_iommu_msi(id, b, d, f, iova, phys);
    }
}

#define TRACE_RISCV_IOMMU_MRIF_NOTIFICATION_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_MRIF_NOTIFICATION) || \
    false)

static inline void _nocheck__trace_riscv_iommu_mrif_notification(const char * id, uint32_t nid, uint64_t phys)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_MRIF_NOTIFICATION) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_mrif_notification " "%s: sent MRIF notification 0x%x to 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, nid, phys);
#line 252 "trace/trace-hw_riscv.h"
        } else {
#line 9 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_mrif_notification " "%s: sent MRIF notification 0x%x to 0x%"PRIx64 "\n", id, nid, phys);
#line 256 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_mrif_notification(const char * id, uint32_t nid, uint64_t phys)
{
    if (true) {
        _nocheck__trace_riscv_iommu_mrif_notification(id, nid, phys);
    }
}

#define TRACE_RISCV_IOMMU_CMD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_CMD) || \
    false)

static inline void _nocheck__trace_riscv_iommu_cmd(const char * id, uint64_t l, uint64_t u)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_CMD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 10 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_cmd " "%s: command 0x%"PRIx64" 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, l, u);
#line 283 "trace/trace-hw_riscv.h"
        } else {
#line 10 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_cmd " "%s: command 0x%"PRIx64" 0x%"PRIx64 "\n", id, l, u);
#line 287 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_cmd(const char * id, uint64_t l, uint64_t u)
{
    if (true) {
        _nocheck__trace_riscv_iommu_cmd(id, l, u);
    }
}

#define TRACE_RISCV_IOMMU_NOTIFIER_ADD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_NOTIFIER_ADD) || \
    false)

static inline void _nocheck__trace_riscv_iommu_notifier_add(const char * id)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_NOTIFIER_ADD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 11 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_notifier_add " "%s: dev-iotlb notifier added" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 314 "trace/trace-hw_riscv.h"
        } else {
#line 11 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_notifier_add " "%s: dev-iotlb notifier added" "\n", id);
#line 318 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_notifier_add(const char * id)
{
    if (true) {
        _nocheck__trace_riscv_iommu_notifier_add(id);
    }
}

#define TRACE_RISCV_IOMMU_NOTIFIER_DEL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_NOTIFIER_DEL) || \
    false)

static inline void _nocheck__trace_riscv_iommu_notifier_del(const char * id)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_NOTIFIER_DEL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_notifier_del " "%s: dev-iotlb notifier removed" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 345 "trace/trace-hw_riscv.h"
        } else {
#line 12 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_notifier_del " "%s: dev-iotlb notifier removed" "\n", id);
#line 349 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_notifier_del(const char * id)
{
    if (true) {
        _nocheck__trace_riscv_iommu_notifier_del(id);
    }
}

#define TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR) || \
    false)

static inline void _nocheck__trace_riscv_iommu_notify_int_vector(uint32_t cause, uint32_t vector)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_NOTIFY_INT_VECTOR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 13 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_notify_int_vector " "Interrupt cause 0x%x sent via vector 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cause, vector);
#line 376 "trace/trace-hw_riscv.h"
        } else {
#line 13 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_notify_int_vector " "Interrupt cause 0x%x sent via vector 0x%x" "\n", cause, vector);
#line 380 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_notify_int_vector(uint32_t cause, uint32_t vector)
{
    if (true) {
        _nocheck__trace_riscv_iommu_notify_int_vector(cause, vector);
    }
}

#define TRACE_RISCV_IOMMU_ICVEC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_ICVEC_WRITE) || \
    false)

static inline void _nocheck__trace_riscv_iommu_icvec_write(uint32_t orig, uint32_t actual)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_ICVEC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 14 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_icvec_write " "ICVEC write: incoming 0x%x actual 0x%x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , orig, actual);
#line 407 "trace/trace-hw_riscv.h"
        } else {
#line 14 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_icvec_write " "ICVEC write: incoming 0x%x actual 0x%x" "\n", orig, actual);
#line 411 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_icvec_write(uint32_t orig, uint32_t actual)
{
    if (true) {
        _nocheck__trace_riscv_iommu_icvec_write(orig, actual);
    }
}

#define TRACE_RISCV_IOMMU_ATS_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_ATS) || \
    false)

static inline void _nocheck__trace_riscv_iommu_ats(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_ATS) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_ats " "%s: translate request %04x:%02x.%u iova: 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id, b, d, f, iova);
#line 438 "trace/trace-hw_riscv.h"
        } else {
#line 15 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_ats " "%s: translate request %04x:%02x.%u iova: 0x%"PRIx64 "\n", id, b, d, f, iova);
#line 442 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_ats(const char * id, unsigned b, unsigned d, unsigned f, uint64_t iova)
{
    if (true) {
        _nocheck__trace_riscv_iommu_ats(id, b, d, f, iova);
    }
}

#define TRACE_RISCV_IOMMU_ATS_INVAL_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_ATS_INVAL) || \
    false)

static inline void _nocheck__trace_riscv_iommu_ats_inval(const char * id)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_ATS_INVAL) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_ats_inval " "%s: dev-iotlb invalidate" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 469 "trace/trace-hw_riscv.h"
        } else {
#line 16 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_ats_inval " "%s: dev-iotlb invalidate" "\n", id);
#line 473 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_ats_inval(const char * id)
{
    if (true) {
        _nocheck__trace_riscv_iommu_ats_inval(id);
    }
}

#define TRACE_RISCV_IOMMU_ATS_PRGR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_ATS_PRGR) || \
    false)

static inline void _nocheck__trace_riscv_iommu_ats_prgr(const char * id)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_ATS_PRGR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_ats_prgr " "%s: dev-iotlb page request group response" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , id);
#line 500 "trace/trace-hw_riscv.h"
        } else {
#line 17 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_ats_prgr " "%s: dev-iotlb page request group response" "\n", id);
#line 504 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_ats_prgr(const char * id)
{
    if (true) {
        _nocheck__trace_riscv_iommu_ats_prgr(id);
    }
}

#define TRACE_RISCV_IOMMU_SYS_IRQ_SENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_SYS_IRQ_SENT) || \
    false)

static inline void _nocheck__trace_riscv_iommu_sys_irq_sent(uint32_t vector)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_SYS_IRQ_SENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_sys_irq_sent " "IRQ sent to vector %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector);
#line 531 "trace/trace-hw_riscv.h"
        } else {
#line 18 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_sys_irq_sent " "IRQ sent to vector %u" "\n", vector);
#line 535 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_sys_irq_sent(uint32_t vector)
{
    if (true) {
        _nocheck__trace_riscv_iommu_sys_irq_sent(vector);
    }
}

#define TRACE_RISCV_IOMMU_SYS_MSI_SENT_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_SYS_MSI_SENT) || \
    false)

static inline void _nocheck__trace_riscv_iommu_sys_msi_sent(uint32_t vector, uint64_t msi_addr, uint32_t msi_data, uint32_t result)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_SYS_MSI_SENT) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_sys_msi_sent " "MSI sent to vector %u msi_addr 0x%"PRIx64" msi_data 0x%x result %u" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , vector, msi_addr, msi_data, result);
#line 562 "trace/trace-hw_riscv.h"
        } else {
#line 19 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_sys_msi_sent " "MSI sent to vector %u msi_addr 0x%"PRIx64" msi_data 0x%x result %u" "\n", vector, msi_addr, msi_data, result);
#line 566 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_sys_msi_sent(uint32_t vector, uint64_t msi_addr, uint32_t msi_data, uint32_t result)
{
    if (true) {
        _nocheck__trace_riscv_iommu_sys_msi_sent(vector, msi_addr, msi_data, result);
    }
}

#define TRACE_RISCV_IOMMU_SYS_RESET_HOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_SYS_RESET_HOLD) || \
    false)

static inline void _nocheck__trace_riscv_iommu_sys_reset_hold(int reset_type)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_SYS_RESET_HOLD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 20 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_sys_reset_hold " "reset type %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reset_type);
#line 593 "trace/trace-hw_riscv.h"
        } else {
#line 20 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_sys_reset_hold " "reset type %d" "\n", reset_type);
#line 597 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_sys_reset_hold(int reset_type)
{
    if (true) {
        _nocheck__trace_riscv_iommu_sys_reset_hold(reset_type);
    }
}

#define TRACE_RISCV_IOMMU_PCI_RESET_HOLD_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_PCI_RESET_HOLD) || \
    false)

static inline void _nocheck__trace_riscv_iommu_pci_reset_hold(int reset_type)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_PCI_RESET_HOLD) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 21 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_pci_reset_hold " "reset type %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , reset_type);
#line 624 "trace/trace-hw_riscv.h"
        } else {
#line 21 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_pci_reset_hold " "reset type %d" "\n", reset_type);
#line 628 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_pci_reset_hold(int reset_type)
{
    if (true) {
        _nocheck__trace_riscv_iommu_pci_reset_hold(reset_type);
    }
}

#define TRACE_RISCV_IOMMU_HPM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_HPM_READ) || \
    false)

static inline void _nocheck__trace_riscv_iommu_hpm_read(uint64_t cycle, uint32_t inhibit, uint64_t ctr_prev, uint64_t ctr_val)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_HPM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_hpm_read " "cycle 0x%"PRIx64" inhibit 0x%x ctr_prev 0x%"PRIx64" ctr_val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cycle, inhibit, ctr_prev, ctr_val);
#line 655 "trace/trace-hw_riscv.h"
        } else {
#line 22 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_hpm_read " "cycle 0x%"PRIx64" inhibit 0x%x ctr_prev 0x%"PRIx64" ctr_val 0x%"PRIx64 "\n", cycle, inhibit, ctr_prev, ctr_val);
#line 659 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_hpm_read(uint64_t cycle, uint32_t inhibit, uint64_t ctr_prev, uint64_t ctr_val)
{
    if (true) {
        _nocheck__trace_riscv_iommu_hpm_read(cycle, inhibit, ctr_prev, ctr_val);
    }
}

#define TRACE_RISCV_IOMMU_HPM_INCR_CTR_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_HPM_INCR_CTR) || \
    false)

static inline void _nocheck__trace_riscv_iommu_hpm_incr_ctr(uint64_t cntr_val)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_HPM_INCR_CTR) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_hpm_incr_ctr " "cntr_val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , cntr_val);
#line 686 "trace/trace-hw_riscv.h"
        } else {
#line 23 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_hpm_incr_ctr " "cntr_val 0x%"PRIx64 "\n", cntr_val);
#line 690 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_hpm_incr_ctr(uint64_t cntr_val)
{
    if (true) {
        _nocheck__trace_riscv_iommu_hpm_incr_ctr(cntr_val);
    }
}

#define TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY) || \
    false)

static inline void _nocheck__trace_riscv_iommu_hpm_iocntinh_cy(bool prev_cy_inh)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_HPM_IOCNTINH_CY) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 24 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_hpm_iocntinh_cy " "prev_cy_inh %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , prev_cy_inh);
#line 717 "trace/trace-hw_riscv.h"
        } else {
#line 24 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_hpm_iocntinh_cy " "prev_cy_inh %d" "\n", prev_cy_inh);
#line 721 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_hpm_iocntinh_cy(bool prev_cy_inh)
{
    if (true) {
        _nocheck__trace_riscv_iommu_hpm_iocntinh_cy(prev_cy_inh);
    }
}

#define TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE) || \
    false)

static inline void _nocheck__trace_riscv_iommu_hpm_cycle_write(uint32_t ovf, uint64_t val)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_HPM_CYCLE_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 25 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_hpm_cycle_write " "ovf 0x%x val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ovf, val);
#line 748 "trace/trace-hw_riscv.h"
        } else {
#line 25 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_hpm_cycle_write " "ovf 0x%x val 0x%"PRIx64 "\n", ovf, val);
#line 752 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_hpm_cycle_write(uint32_t ovf, uint64_t val)
{
    if (true) {
        _nocheck__trace_riscv_iommu_hpm_cycle_write(ovf, val);
    }
}

#define TRACE_RISCV_IOMMU_HPM_EVT_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RISCV_IOMMU_HPM_EVT_WRITE) || \
    false)

static inline void _nocheck__trace_riscv_iommu_hpm_evt_write(uint32_t ctr_idx, uint32_t ovf, uint64_t val)
{
    if (trace_event_get_state(TRACE_RISCV_IOMMU_HPM_EVT_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/riscv/trace-events"
            qemu_log("%d@%zu.%06zu:riscv_iommu_hpm_evt_write " "ctr_idx 0x%x ovf 0x%x val 0x%"PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ctr_idx, ovf, val);
#line 779 "trace/trace-hw_riscv.h"
        } else {
#line 26 "../hw/riscv/trace-events"
            qemu_log("riscv_iommu_hpm_evt_write " "ctr_idx 0x%x ovf 0x%x val 0x%"PRIx64 "\n", ctr_idx, ovf, val);
#line 783 "trace/trace-hw_riscv.h"
        }
    }
}

static inline void trace_riscv_iommu_hpm_evt_write(uint32_t ctr_idx, uint32_t ovf, uint64_t val)
{
    if (true) {
        _nocheck__trace_riscv_iommu_hpm_evt_write(ctr_idx, ovf, val);
    }
}
#endif /* TRACE_HW_RISCV_GENERATED_TRACERS_H */
