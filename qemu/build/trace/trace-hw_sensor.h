/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_SENSOR_GENERATED_TRACERS_H
#define TRACE_HW_SENSOR_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_TMP105_READ_EVENT;
extern TraceEvent _TRACE_TMP105_WRITE_EVENT;
extern TraceEvent _TRACE_TMP105_WRITE_SHUTDOWN_EVENT;
extern uint16_t _TRACE_TMP105_READ_DSTATE;
extern uint16_t _TRACE_TMP105_WRITE_DSTATE;
extern uint16_t _TRACE_TMP105_WRITE_SHUTDOWN_DSTATE;
#define TRACE_TMP105_READ_ENABLED 1
#define TRACE_TMP105_WRITE_ENABLED 1
#define TRACE_TMP105_WRITE_SHUTDOWN_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_TMP105_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TMP105_READ) || \
    false)

static inline void _nocheck__trace_tmp105_read(uint8_t dev, uint8_t addr)
{
    if (trace_event_get_state(TRACE_TMP105_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/sensor/trace-events"
            qemu_log("%d@%zu.%06zu:tmp105_read " "device: 0x%02x, addr: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr);
#line 37 "trace/trace-hw_sensor.h"
        } else {
#line 4 "../hw/sensor/trace-events"
            qemu_log("tmp105_read " "device: 0x%02x, addr: 0x%02x" "\n", dev, addr);
#line 41 "trace/trace-hw_sensor.h"
        }
    }
}

static inline void trace_tmp105_read(uint8_t dev, uint8_t addr)
{
    if (true) {
        _nocheck__trace_tmp105_read(dev, addr);
    }
}

#define TRACE_TMP105_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TMP105_WRITE) || \
    false)

static inline void _nocheck__trace_tmp105_write(uint8_t dev, uint8_t addr)
{
    if (trace_event_get_state(TRACE_TMP105_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/sensor/trace-events"
            qemu_log("%d@%zu.%06zu:tmp105_write " "device: 0x%02x, addr 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev, addr);
#line 68 "trace/trace-hw_sensor.h"
        } else {
#line 5 "../hw/sensor/trace-events"
            qemu_log("tmp105_write " "device: 0x%02x, addr 0x%02x" "\n", dev, addr);
#line 72 "trace/trace-hw_sensor.h"
        }
    }
}

static inline void trace_tmp105_write(uint8_t dev, uint8_t addr)
{
    if (true) {
        _nocheck__trace_tmp105_write(dev, addr);
    }
}

#define TRACE_TMP105_WRITE_SHUTDOWN_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_TMP105_WRITE_SHUTDOWN) || \
    false)

static inline void _nocheck__trace_tmp105_write_shutdown(uint8_t dev)
{
    if (trace_event_get_state(TRACE_TMP105_WRITE_SHUTDOWN) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 6 "../hw/sensor/trace-events"
            qemu_log("%d@%zu.%06zu:tmp105_write_shutdown " "device: 0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , dev);
#line 99 "trace/trace-hw_sensor.h"
        } else {
#line 6 "../hw/sensor/trace-events"
            qemu_log("tmp105_write_shutdown " "device: 0x%02x" "\n", dev);
#line 103 "trace/trace-hw_sensor.h"
        }
    }
}

static inline void trace_tmp105_write_shutdown(uint8_t dev)
{
    if (true) {
        _nocheck__trace_tmp105_write_shutdown(dev);
    }
}
#endif /* TRACE_HW_SENSOR_GENERATED_TRACERS_H */
