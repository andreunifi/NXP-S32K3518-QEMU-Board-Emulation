/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_RTC_GENERATED_TRACERS_H
#define TRACE_HW_RTC_GENERATED_TRACERS_H

#include "trace/control.h"

extern TraceEvent _TRACE_ALLWINNER_RTC_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_RTC_WRITE_EVENT;
extern TraceEvent _TRACE_SUN4V_RTC_READ_EVENT;
extern TraceEvent _TRACE_SUN4V_RTC_WRITE_EVENT;
extern TraceEvent _TRACE_XLNX_ZYNQMP_RTC_GETTIME_EVENT;
extern TraceEvent _TRACE_PL031_IRQ_STATE_EVENT;
extern TraceEvent _TRACE_PL031_READ_EVENT;
extern TraceEvent _TRACE_PL031_WRITE_EVENT;
extern TraceEvent _TRACE_PL031_ALARM_RAISED_EVENT;
extern TraceEvent _TRACE_PL031_SET_ALARM_EVENT;
extern TraceEvent _TRACE_ASPEED_RTC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_RTC_WRITE_EVENT;
extern TraceEvent _TRACE_DS1338_RECV_EVENT;
extern TraceEvent _TRACE_DS1338_SEND_EVENT;
extern TraceEvent _TRACE_M48TXX_NVRAM_IO_READ_EVENT;
extern TraceEvent _TRACE_M48TXX_NVRAM_IO_WRITE_EVENT;
extern TraceEvent _TRACE_M48TXX_NVRAM_MEM_READ_EVENT;
extern TraceEvent _TRACE_M48TXX_NVRAM_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_GOLDFISH_RTC_READ_EVENT;
extern TraceEvent _TRACE_GOLDFISH_RTC_WRITE_EVENT;
extern TraceEvent _TRACE_RS5C372_RECV_EVENT;
extern TraceEvent _TRACE_RS5C372_SEND_EVENT;
extern uint16_t _TRACE_ALLWINNER_RTC_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_RTC_WRITE_DSTATE;
extern uint16_t _TRACE_SUN4V_RTC_READ_DSTATE;
extern uint16_t _TRACE_SUN4V_RTC_WRITE_DSTATE;
extern uint16_t _TRACE_XLNX_ZYNQMP_RTC_GETTIME_DSTATE;
extern uint16_t _TRACE_PL031_IRQ_STATE_DSTATE;
extern uint16_t _TRACE_PL031_READ_DSTATE;
extern uint16_t _TRACE_PL031_WRITE_DSTATE;
extern uint16_t _TRACE_PL031_ALARM_RAISED_DSTATE;
extern uint16_t _TRACE_PL031_SET_ALARM_DSTATE;
extern uint16_t _TRACE_ASPEED_RTC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_RTC_WRITE_DSTATE;
extern uint16_t _TRACE_DS1338_RECV_DSTATE;
extern uint16_t _TRACE_DS1338_SEND_DSTATE;
extern uint16_t _TRACE_M48TXX_NVRAM_IO_READ_DSTATE;
extern uint16_t _TRACE_M48TXX_NVRAM_IO_WRITE_DSTATE;
extern uint16_t _TRACE_M48TXX_NVRAM_MEM_READ_DSTATE;
extern uint16_t _TRACE_M48TXX_NVRAM_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_GOLDFISH_RTC_READ_DSTATE;
extern uint16_t _TRACE_GOLDFISH_RTC_WRITE_DSTATE;
extern uint16_t _TRACE_RS5C372_RECV_DSTATE;
extern uint16_t _TRACE_RS5C372_SEND_DSTATE;
#define TRACE_ALLWINNER_RTC_READ_ENABLED 1
#define TRACE_ALLWINNER_RTC_WRITE_ENABLED 1
#define TRACE_SUN4V_RTC_READ_ENABLED 1
#define TRACE_SUN4V_RTC_WRITE_ENABLED 1
#define TRACE_XLNX_ZYNQMP_RTC_GETTIME_ENABLED 1
#define TRACE_PL031_IRQ_STATE_ENABLED 1
#define TRACE_PL031_READ_ENABLED 1
#define TRACE_PL031_WRITE_ENABLED 1
#define TRACE_PL031_ALARM_RAISED_ENABLED 1
#define TRACE_PL031_SET_ALARM_ENABLED 1
#define TRACE_ASPEED_RTC_READ_ENABLED 1
#define TRACE_ASPEED_RTC_WRITE_ENABLED 1
#define TRACE_DS1338_RECV_ENABLED 1
#define TRACE_DS1338_SEND_ENABLED 1
#define TRACE_M48TXX_NVRAM_IO_READ_ENABLED 1
#define TRACE_M48TXX_NVRAM_IO_WRITE_ENABLED 1
#define TRACE_M48TXX_NVRAM_MEM_READ_ENABLED 1
#define TRACE_M48TXX_NVRAM_MEM_WRITE_ENABLED 1
#define TRACE_GOLDFISH_RTC_READ_ENABLED 1
#define TRACE_GOLDFISH_RTC_WRITE_ENABLED 1
#define TRACE_RS5C372_RECV_ENABLED 1
#define TRACE_RS5C372_SEND_ENABLED 1
#include "qemu/log-for-trace.h"
#include "qemu/error-report.h"


#define TRACE_ALLWINNER_RTC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_RTC_READ) || \
    false)

static inline void _nocheck__trace_allwinner_rtc_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_ALLWINNER_RTC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 4 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_rtc_read " "addr 0x%" PRIx64 " value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 94 "trace/trace-hw_rtc.h"
        } else {
#line 4 "../hw/rtc/trace-events"
            qemu_log("allwinner_rtc_read " "addr 0x%" PRIx64 " value 0x%" PRIx64 "\n", addr, value);
#line 98 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_allwinner_rtc_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_allwinner_rtc_read(addr, value);
    }
}

#define TRACE_ALLWINNER_RTC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ALLWINNER_RTC_WRITE) || \
    false)

static inline void _nocheck__trace_allwinner_rtc_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_ALLWINNER_RTC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 5 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:allwinner_rtc_write " "addr 0x%" PRIx64 " value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 125 "trace/trace-hw_rtc.h"
        } else {
#line 5 "../hw/rtc/trace-events"
            qemu_log("allwinner_rtc_write " "addr 0x%" PRIx64 " value 0x%" PRIx64 "\n", addr, value);
#line 129 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_allwinner_rtc_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_allwinner_rtc_write(addr, value);
    }
}

#define TRACE_SUN4V_RTC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SUN4V_RTC_READ) || \
    false)

static inline void _nocheck__trace_sun4v_rtc_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_SUN4V_RTC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 8 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:sun4v_rtc_read " "read: addr 0x%" PRIx64 " value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 156 "trace/trace-hw_rtc.h"
        } else {
#line 8 "../hw/rtc/trace-events"
            qemu_log("sun4v_rtc_read " "read: addr 0x%" PRIx64 " value 0x%" PRIx64 "\n", addr, value);
#line 160 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_sun4v_rtc_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_sun4v_rtc_read(addr, value);
    }
}

#define TRACE_SUN4V_RTC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_SUN4V_RTC_WRITE) || \
    false)

static inline void _nocheck__trace_sun4v_rtc_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_SUN4V_RTC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 9 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:sun4v_rtc_write " "write: addr 0x%" PRIx64 " value 0x%" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 187 "trace/trace-hw_rtc.h"
        } else {
#line 9 "../hw/rtc/trace-events"
            qemu_log("sun4v_rtc_write " "write: addr 0x%" PRIx64 " value 0x%" PRIx64 "\n", addr, value);
#line 191 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_sun4v_rtc_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_sun4v_rtc_write(addr, value);
    }
}

#define TRACE_XLNX_ZYNQMP_RTC_GETTIME_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_XLNX_ZYNQMP_RTC_GETTIME) || \
    false)

static inline void _nocheck__trace_xlnx_zynqmp_rtc_gettime(int year, int month, int day, int hour, int min, int sec)
{
    if (trace_event_get_state(TRACE_XLNX_ZYNQMP_RTC_GETTIME) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 12 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:xlnx_zynqmp_rtc_gettime " "Get time from host: %d-%d-%d %2d:%02d:%02d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , year, month, day, hour, min, sec);
#line 218 "trace/trace-hw_rtc.h"
        } else {
#line 12 "../hw/rtc/trace-events"
            qemu_log("xlnx_zynqmp_rtc_gettime " "Get time from host: %d-%d-%d %2d:%02d:%02d" "\n", year, month, day, hour, min, sec);
#line 222 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_xlnx_zynqmp_rtc_gettime(int year, int month, int day, int hour, int min, int sec)
{
    if (true) {
        _nocheck__trace_xlnx_zynqmp_rtc_gettime(year, month, day, hour, min, sec);
    }
}

#define TRACE_PL031_IRQ_STATE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PL031_IRQ_STATE) || \
    false)

static inline void _nocheck__trace_pl031_irq_state(int level)
{
    if (trace_event_get_state(TRACE_PL031_IRQ_STATE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 15 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:pl031_irq_state " "irq state %d" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , level);
#line 249 "trace/trace-hw_rtc.h"
        } else {
#line 15 "../hw/rtc/trace-events"
            qemu_log("pl031_irq_state " "irq state %d" "\n", level);
#line 253 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_pl031_irq_state(int level)
{
    if (true) {
        _nocheck__trace_pl031_irq_state(level);
    }
}

#define TRACE_PL031_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PL031_READ) || \
    false)

static inline void _nocheck__trace_pl031_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_PL031_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 16 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:pl031_read " "addr 0x%08x value 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 280 "trace/trace-hw_rtc.h"
        } else {
#line 16 "../hw/rtc/trace-events"
            qemu_log("pl031_read " "addr 0x%08x value 0x%08x" "\n", addr, value);
#line 284 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_pl031_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_pl031_read(addr, value);
    }
}

#define TRACE_PL031_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PL031_WRITE) || \
    false)

static inline void _nocheck__trace_pl031_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_PL031_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 17 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:pl031_write " "addr 0x%08x value 0x%08x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 311 "trace/trace-hw_rtc.h"
        } else {
#line 17 "../hw/rtc/trace-events"
            qemu_log("pl031_write " "addr 0x%08x value 0x%08x" "\n", addr, value);
#line 315 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_pl031_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_pl031_write(addr, value);
    }
}

#define TRACE_PL031_ALARM_RAISED_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PL031_ALARM_RAISED) || \
    false)

static inline void _nocheck__trace_pl031_alarm_raised(void)
{
    if (trace_event_get_state(TRACE_PL031_ALARM_RAISED) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 18 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:pl031_alarm_raised " "alarm raised" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     );
#line 342 "trace/trace-hw_rtc.h"
        } else {
#line 18 "../hw/rtc/trace-events"
            qemu_log("pl031_alarm_raised " "alarm raised" "\n");
#line 346 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_pl031_alarm_raised(void)
{
    if (true) {
        _nocheck__trace_pl031_alarm_raised();
    }
}

#define TRACE_PL031_SET_ALARM_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_PL031_SET_ALARM) || \
    false)

static inline void _nocheck__trace_pl031_set_alarm(uint32_t ticks)
{
    if (trace_event_get_state(TRACE_PL031_SET_ALARM) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 19 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:pl031_set_alarm " "alarm set for %u ticks" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , ticks);
#line 373 "trace/trace-hw_rtc.h"
        } else {
#line 19 "../hw/rtc/trace-events"
            qemu_log("pl031_set_alarm " "alarm set for %u ticks" "\n", ticks);
#line 377 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_pl031_set_alarm(uint32_t ticks)
{
    if (true) {
        _nocheck__trace_pl031_set_alarm(ticks);
    }
}

#define TRACE_ASPEED_RTC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_RTC_READ) || \
    false)

static inline void _nocheck__trace_aspeed_rtc_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_RTC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 22 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_rtc_read " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 404 "trace/trace-hw_rtc.h"
        } else {
#line 22 "../hw/rtc/trace-events"
            qemu_log("aspeed_rtc_read " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n", addr, value);
#line 408 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_aspeed_rtc_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_aspeed_rtc_read(addr, value);
    }
}

#define TRACE_ASPEED_RTC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_ASPEED_RTC_WRITE) || \
    false)

static inline void _nocheck__trace_aspeed_rtc_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_ASPEED_RTC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 23 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:aspeed_rtc_write " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 435 "trace/trace-hw_rtc.h"
        } else {
#line 23 "../hw/rtc/trace-events"
            qemu_log("aspeed_rtc_write " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n", addr, value);
#line 439 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_aspeed_rtc_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_aspeed_rtc_write(addr, value);
    }
}

#define TRACE_DS1338_RECV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DS1338_RECV) || \
    false)

static inline void _nocheck__trace_ds1338_recv(uint32_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_DS1338_RECV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 26 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:ds1338_recv " "[0x%" PRIx32 "] -> 0x%02" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 466 "trace/trace-hw_rtc.h"
        } else {
#line 26 "../hw/rtc/trace-events"
            qemu_log("ds1338_recv " "[0x%" PRIx32 "] -> 0x%02" PRIx8 "\n", addr, value);
#line 470 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_ds1338_recv(uint32_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_ds1338_recv(addr, value);
    }
}

#define TRACE_DS1338_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_DS1338_SEND) || \
    false)

static inline void _nocheck__trace_ds1338_send(uint32_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_DS1338_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 27 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:ds1338_send " "[0x%" PRIx32 "] <- 0x%02" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 497 "trace/trace-hw_rtc.h"
        } else {
#line 27 "../hw/rtc/trace-events"
            qemu_log("ds1338_send " "[0x%" PRIx32 "] <- 0x%02" PRIx8 "\n", addr, value);
#line 501 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_ds1338_send(uint32_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_ds1338_send(addr, value);
    }
}

#define TRACE_M48TXX_NVRAM_IO_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_M48TXX_NVRAM_IO_READ) || \
    false)

static inline void _nocheck__trace_m48txx_nvram_io_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_M48TXX_NVRAM_IO_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 30 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:m48txx_nvram_io_read " "io read addr:0x%04" PRIx64 " value:0x%02" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 528 "trace/trace-hw_rtc.h"
        } else {
#line 30 "../hw/rtc/trace-events"
            qemu_log("m48txx_nvram_io_read " "io read addr:0x%04" PRIx64 " value:0x%02" PRIx64 "\n", addr, value);
#line 532 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_m48txx_nvram_io_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_m48txx_nvram_io_read(addr, value);
    }
}

#define TRACE_M48TXX_NVRAM_IO_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_M48TXX_NVRAM_IO_WRITE) || \
    false)

static inline void _nocheck__trace_m48txx_nvram_io_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_M48TXX_NVRAM_IO_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 31 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:m48txx_nvram_io_write " "io write addr:0x%04" PRIx64 " value:0x%02" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 559 "trace/trace-hw_rtc.h"
        } else {
#line 31 "../hw/rtc/trace-events"
            qemu_log("m48txx_nvram_io_write " "io write addr:0x%04" PRIx64 " value:0x%02" PRIx64 "\n", addr, value);
#line 563 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_m48txx_nvram_io_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_m48txx_nvram_io_write(addr, value);
    }
}

#define TRACE_M48TXX_NVRAM_MEM_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_M48TXX_NVRAM_MEM_READ) || \
    false)

static inline void _nocheck__trace_m48txx_nvram_mem_read(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_M48TXX_NVRAM_MEM_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 32 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:m48txx_nvram_mem_read " "mem read addr:0x%04x value:0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 590 "trace/trace-hw_rtc.h"
        } else {
#line 32 "../hw/rtc/trace-events"
            qemu_log("m48txx_nvram_mem_read " "mem read addr:0x%04x value:0x%02x" "\n", addr, value);
#line 594 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_m48txx_nvram_mem_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_m48txx_nvram_mem_read(addr, value);
    }
}

#define TRACE_M48TXX_NVRAM_MEM_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_M48TXX_NVRAM_MEM_WRITE) || \
    false)

static inline void _nocheck__trace_m48txx_nvram_mem_write(uint32_t addr, uint32_t value)
{
    if (trace_event_get_state(TRACE_M48TXX_NVRAM_MEM_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 33 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:m48txx_nvram_mem_write " "mem write addr:0x%04x value:0x%02x" "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 621 "trace/trace-hw_rtc.h"
        } else {
#line 33 "../hw/rtc/trace-events"
            qemu_log("m48txx_nvram_mem_write " "mem write addr:0x%04x value:0x%02x" "\n", addr, value);
#line 625 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_m48txx_nvram_mem_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_m48txx_nvram_mem_write(addr, value);
    }
}

#define TRACE_GOLDFISH_RTC_READ_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_RTC_READ) || \
    false)

static inline void _nocheck__trace_goldfish_rtc_read(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_GOLDFISH_RTC_READ) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 36 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_rtc_read " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 652 "trace/trace-hw_rtc.h"
        } else {
#line 36 "../hw/rtc/trace-events"
            qemu_log("goldfish_rtc_read " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n", addr, value);
#line 656 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_goldfish_rtc_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_goldfish_rtc_read(addr, value);
    }
}

#define TRACE_GOLDFISH_RTC_WRITE_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_GOLDFISH_RTC_WRITE) || \
    false)

static inline void _nocheck__trace_goldfish_rtc_write(uint64_t addr, uint64_t value)
{
    if (trace_event_get_state(TRACE_GOLDFISH_RTC_WRITE) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 37 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:goldfish_rtc_write " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 683 "trace/trace-hw_rtc.h"
        } else {
#line 37 "../hw/rtc/trace-events"
            qemu_log("goldfish_rtc_write " "addr 0x%02" PRIx64 " value 0x%08" PRIx64 "\n", addr, value);
#line 687 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_goldfish_rtc_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_goldfish_rtc_write(addr, value);
    }
}

#define TRACE_RS5C372_RECV_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RS5C372_RECV) || \
    false)

static inline void _nocheck__trace_rs5c372_recv(uint32_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_RS5C372_RECV) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 40 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:rs5c372_recv " "[0x%" PRIx32 "] -> 0x%02" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 714 "trace/trace-hw_rtc.h"
        } else {
#line 40 "../hw/rtc/trace-events"
            qemu_log("rs5c372_recv " "[0x%" PRIx32 "] -> 0x%02" PRIx8 "\n", addr, value);
#line 718 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_rs5c372_recv(uint32_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_rs5c372_recv(addr, value);
    }
}

#define TRACE_RS5C372_SEND_BACKEND_DSTATE() ( \
    trace_event_get_state_dynamic_by_id(TRACE_RS5C372_SEND) || \
    false)

static inline void _nocheck__trace_rs5c372_send(uint32_t addr, uint8_t value)
{
    if (trace_event_get_state(TRACE_RS5C372_SEND) && qemu_loglevel_mask(LOG_TRACE)) {
        if (message_with_timestamp) {
            struct timeval _now;
            gettimeofday(&_now, NULL);
#line 41 "../hw/rtc/trace-events"
            qemu_log("%d@%zu.%06zu:rs5c372_send " "[0x%" PRIx32 "] <- 0x%02" PRIx8 "\n",
                     qemu_get_thread_id(),
                     (size_t)_now.tv_sec, (size_t)_now.tv_usec
                     , addr, value);
#line 745 "trace/trace-hw_rtc.h"
        } else {
#line 41 "../hw/rtc/trace-events"
            qemu_log("rs5c372_send " "[0x%" PRIx32 "] <- 0x%02" PRIx8 "\n", addr, value);
#line 749 "trace/trace-hw_rtc.h"
        }
    }
}

static inline void trace_rs5c372_send(uint32_t addr, uint8_t value)
{
    if (true) {
        _nocheck__trace_rs5c372_send(addr, value);
    }
}
#endif /* TRACE_HW_RTC_GENERATED_TRACERS_H */
